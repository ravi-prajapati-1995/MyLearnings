Decomposition Patterns: These are the pattern which tells us that how we should break monolith application into microservice.
 1. Decompose by Business Capability
    Explanation: This pattern involves identifying distinct business capabilities within your application and creating
    separate microservices for each capability. Each microservice focuses on a specific business function.

    Example: In an e-commerce application, you might have separate microservices for inventory management,
    order processing, payment handling, and customer service. Each microservice handles its own business logic
    and can be developed, deployed, and scaled independently.

 2. Decompose by Subdomain
 Explanation: Using domain-driven design, this pattern breaks down the application based on subdomains.
 Each subdomain corresponds to a microservice, ensuring that the microservices align with the business's domain model.

 Example: In a healthcare application, you might have microservices for patient management, appointment scheduling,
 billing, and medical records. Each microservice represents a subdomain of the healthcare system.

 3. Strangler Fig
 Explanation: This pattern involves gradually replacing parts of a monolithic application with microservices.
 It allows for incremental refactoring without disrupting the entire system.

 Example: If you have a legacy monolithic application, you can start by creating a new microservice for user authentication.
  Over time, you can replace other parts of the monolith, such as product catalog and order management, with microservices.

  We will first try with some percentage of traffic to new service like 10% in case there is some issue we can down that
  microservice and traffic will start going to monolith application only.
  If all things gone right then we gradually increase traffic and when 100% traffic moved to microservice then we can
  remove code from monolith

Data Management Pattern:
    1. Database Per Service: - Each service Has its own DB
    2. Shared Database for all service
        Why it is not recommended: Lets take example of e-commerce we have OrderService, PaymentService and InventoryService
            1. If we have high volume of data for OrderService like in million and there are less data for PaymentService
                and InventoryService then there is no way we can only increase memory for OrderService we need to increase
                memory for whole DB
            2. Table modification can cause problem: ie if a team that is working with PaymentService needs to delete a
                column from table T1 then they need to take care about all other teams if they need this column or not.
                Its not scalable

        Benefits:
            1. Can join multiple tables as all data is stored at one place.
            2. Transaction management is easier: if we have T1 to T10 tables and we got issue at T8 then we can easily
                rollback for tables where we updated the entries

    Issue with Database per Service:
        1. We can't Join multiple tables
        2. We can't able to manage transaction between multiple dbs as we can do in shared database approach

To resolve Transaction issue we have SAGA patterns:

Choreography: This pattern is suggest that each service do its work, if any service fails it generate compensate event to rollback
    changes done by the previous service.

i.e: 1. When OrderService receive event it generate event order.created
     2. Then PaymentService receive that event and do needful steps, if something went wrong on payment service it
        creates compensate event(payment.failed) that will listen by OrderService and then order status will be updated
     3. If payment success event is received by InventoryService, if something fails on inventory then inventory service
        generate compensate event(inventory.failed) that will listen by PaymentService and OrderService
        payment service rollback its changes and order service too

Orchestration-Based Saga: In this pattern we will have a central service that manage the workflow, service interact with
                          orchestrator not with each other

i.e:
    1. Create a OrderOrchestrator, when order created orchestrator receive event and call PaymentService to do its steps
    2. If something fails then orchestrator will receive event and generate event to rollback on OrderService changes
    3. If payment success then orchestrator call inventory service
    4. if something fail on InventoryService then it received by orchestrator and event generated to PaymentService and OrderService

CQRS: In microservice we have issue that we can't join multiple tables to get data if both tables is used by different microservices
To resolve this issue we can use CQRS pattern:
CQRS: Command Query Responsibility Segregation
    If we have T1 in OrderService and T2 in PaymentService we can't join T1 and T2 because they are part of different
    microservice.
    To overcome this problem we will do all create, delete, update operation in their particular DB and an event
    is generated to update the view that we have to read.
    All read operation is handled by different view and this view keep in sync with T1 and T2 in this way we can overcome
    multi table selection
    we can also use DB triggers and procedure to keep in sync view with T1 and T2
